// Code generated by Kitex v0.5.2. DO NOT EDIT.

package appservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	app "github.com/qml-123/GateWay/kitex_gen/app"
)

func serviceInfo() *kitex.ServiceInfo {
	return appServiceServiceInfo
}

var appServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AppService"
	handlerType := (*app.AppService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Ping": kitex.NewMethodInfo(pingHandler, newAppServicePingArgs, newAppServicePingResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "app",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func pingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*app.AppServicePingArgs)
	realResult := result.(*app.AppServicePingResult)
	success, err := handler.(app.AppService).Ping(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAppServicePingArgs() interface{} {
	return app.NewAppServicePingArgs()
}

func newAppServicePingResult() interface{} {
	return app.NewAppServicePingResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Ping(ctx context.Context, req *app.PingRequest) (r *app.PingResponse, err error) {
	var _args app.AppServicePingArgs
	_args.Req = req
	var _result app.AppServicePingResult
	if err = p.c.Call(ctx, "Ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
